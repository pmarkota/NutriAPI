// <auto-generated />
using System;
using API.DAL.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace API.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241109181113_AddGoogleAuthColumns")]
    partial class AddGoogleAuthColumns
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.HasSequence<int>("seq_schema_version", "graphql")
                .IsCyclic();

            modelBuilder.Entity("API.DAL.Models.MealPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<long?>("CaloricTotal")
                        .HasColumnType("bigint")
                        .HasColumnName("caloric_total");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<string>("PlanName")
                        .HasColumnType("character varying")
                        .HasColumnName("plan_name");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("MealPlans_pkey");

                    b.HasIndex("UserId");

                    b.ToTable("MealPlans", "public");
                });

            modelBuilder.Entity("API.DAL.Models.MealPlanRecipe", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Day")
                        .HasColumnType("character varying")
                        .HasColumnName("day");

                    b.Property<Guid?>("MealPlanId")
                        .HasColumnType("uuid")
                        .HasColumnName("meal_plan_id");

                    b.Property<string>("MealType")
                        .HasColumnType("character varying")
                        .HasColumnName("meal_type");

                    b.Property<Guid?>("RecipeId")
                        .HasColumnType("uuid")
                        .HasColumnName("recipe_id");

                    b.HasKey("Id")
                        .HasName("MealPlanRecipes_pkey");

                    b.HasIndex("MealPlanId");

                    b.HasIndex("RecipeId");

                    b.ToTable("MealPlanRecipes", "public");
                });

            modelBuilder.Entity("API.DAL.Models.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<bool?>("IsSent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_sent");

                    b.Property<string>("Message")
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<DateTime?>("ScheduledAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("scheduled_at");

                    b.Property<string>("Type")
                        .HasColumnType("character varying")
                        .HasColumnName("type");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("Notifications_pkey");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications", "public");
                });

            modelBuilder.Entity("API.DAL.Models.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<float?>("Amount")
                        .HasColumnType("real")
                        .HasColumnName("amount");

                    b.Property<string>("Currency")
                        .HasColumnType("character varying")
                        .HasColumnName("currency");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("payment_date");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("character varying")
                        .HasColumnName("payment_method");

                    b.Property<string>("Status")
                        .HasColumnType("character varying")
                        .HasColumnName("status");

                    b.Property<string>("SubscriptionType")
                        .HasColumnType("character varying")
                        .HasColumnName("subscription_type");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("Payments_pkey");

                    b.HasIndex("UserId");

                    b.ToTable("Payments", "public");
                });

            modelBuilder.Entity("API.DAL.Models.Recipe", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<long?>("Calories")
                        .HasColumnType("bigint")
                        .HasColumnName("calories");

                    b.Property<long?>("Carbohydrates")
                        .HasColumnType("bigint")
                        .HasColumnName("carbohydrates");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("DietaryLabels")
                        .HasColumnType("character varying")
                        .HasColumnName("dietary_labels");

                    b.Property<long?>("Fats")
                        .HasColumnType("bigint")
                        .HasColumnName("fats");

                    b.Property<string>("Ingredients")
                        .HasColumnType("jsonb")
                        .HasColumnName("ingredients");

                    b.Property<string>("Instructions")
                        .HasColumnType("text")
                        .HasColumnName("instructions");

                    b.Property<string>("Name")
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.Property<long?>("Protein")
                        .HasColumnType("bigint")
                        .HasColumnName("protein");

                    b.HasKey("Id")
                        .HasName("Recipes_pkey");

                    b.HasIndex("CreatedBy");

                    b.ToTable("Recipes", "public");
                });

            modelBuilder.Entity("API.DAL.Models.ShoppingList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("GeneratedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("generated_at")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid?>("MealPlanId")
                        .HasColumnType("uuid")
                        .HasColumnName("meal_plan_id");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("ShoppingLists_pkey");

                    b.HasIndex("MealPlanId");

                    b.HasIndex("UserId");

                    b.ToTable("ShoppingLists", "public");
                });

            modelBuilder.Entity("API.DAL.Models.ShoppingListItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("IngredientName")
                        .HasColumnType("character varying")
                        .HasColumnName("ingredient_name");

                    b.Property<bool?>("IsChecked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_checked");

                    b.Property<float?>("Quantity")
                        .HasColumnType("real")
                        .HasColumnName("quantity");

                    b.Property<Guid?>("ShoppingListId")
                        .HasColumnType("uuid")
                        .HasColumnName("shopping_list_id");

                    b.Property<string>("Unit")
                        .HasColumnType("character varying")
                        .HasColumnName("unit");

                    b.HasKey("Id")
                        .HasName("ShoppingListItems_pkey");

                    b.HasIndex("ShoppingListId");

                    b.ToTable("ShoppingListItems", "public");
                });

            modelBuilder.Entity("API.DAL.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<long?>("CaloricGoal")
                        .HasColumnType("bigint")
                        .HasColumnName("caloric_goal");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("DietaryPreference")
                        .HasColumnType("text")
                        .HasColumnName("dietary_preference");

                    b.Property<string>("Email")
                        .HasColumnType("character varying")
                        .HasColumnName("email");

                    b.Property<string>("Goal")
                        .HasColumnType("character varying")
                        .HasColumnName("goal");

                    b.Property<string>("GoogleId")
                        .HasColumnType("text")
                        .HasColumnName("google_id");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_login");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("Picture")
                        .HasColumnType("text")
                        .HasColumnName("picture");

                    b.Property<string>("SubscriptionType")
                        .HasColumnType("character varying")
                        .HasColumnName("subscription_type");

                    b.Property<string>("Username")
                        .HasColumnType("character varying")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("Users_pkey");

                    b.ToTable("users", "public");
                });

            modelBuilder.Entity("API.DAL.Models.UserPreference", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("user_id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("ExcludedIngredients")
                        .HasColumnType("text")
                        .HasColumnName("excluded_ingredients");

                    b.Property<string>("FavoriteRecipes")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("favorite_recipes");

                    b.HasKey("UserId")
                        .HasName("UserPreferences_pkey");

                    b.ToTable("UserPreferences", "public");
                });

            modelBuilder.Entity("API.DAL.Models.MealPlan", b =>
                {
                    b.HasOne("API.DAL.Models.User", "User")
                        .WithMany("MealPlans")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("MealPlans_user_id_fkey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.DAL.Models.MealPlanRecipe", b =>
                {
                    b.HasOne("API.DAL.Models.MealPlan", "MealPlan")
                        .WithMany("MealPlanRecipes")
                        .HasForeignKey("MealPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("MealPlanRecipes_meal_plan_id_fkey");

                    b.HasOne("API.DAL.Models.Recipe", "Recipe")
                        .WithMany("MealPlanRecipes")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("MealPlanRecipes_recipe_id_fkey");

                    b.Navigation("MealPlan");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("API.DAL.Models.Notification", b =>
                {
                    b.HasOne("API.DAL.Models.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("Notifications_user_id_fkey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.DAL.Models.Payment", b =>
                {
                    b.HasOne("API.DAL.Models.User", "User")
                        .WithMany("Payments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("Payments_user_id_fkey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.DAL.Models.Recipe", b =>
                {
                    b.HasOne("API.DAL.Models.User", "CreatedByNavigation")
                        .WithMany("Recipes")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("Recipes_created_by_fkey");

                    b.Navigation("CreatedByNavigation");
                });

            modelBuilder.Entity("API.DAL.Models.ShoppingList", b =>
                {
                    b.HasOne("API.DAL.Models.MealPlan", "MealPlan")
                        .WithMany("ShoppingLists")
                        .HasForeignKey("MealPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("ShoppingLists_meal_plan_id_fkey");

                    b.HasOne("API.DAL.Models.User", "User")
                        .WithMany("ShoppingLists")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("ShoppingLists_user_id_fkey");

                    b.Navigation("MealPlan");

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.DAL.Models.ShoppingListItem", b =>
                {
                    b.HasOne("API.DAL.Models.ShoppingList", "ShoppingList")
                        .WithMany("ShoppingListItems")
                        .HasForeignKey("ShoppingListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("ShoppingListItems_shopping_list_id_fkey");

                    b.Navigation("ShoppingList");
                });

            modelBuilder.Entity("API.DAL.Models.UserPreference", b =>
                {
                    b.HasOne("API.DAL.Models.User", "User")
                        .WithOne("UserPreference")
                        .HasForeignKey("API.DAL.Models.UserPreference", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("UserPreferences_user_id_fkey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.DAL.Models.MealPlan", b =>
                {
                    b.Navigation("MealPlanRecipes");

                    b.Navigation("ShoppingLists");
                });

            modelBuilder.Entity("API.DAL.Models.Recipe", b =>
                {
                    b.Navigation("MealPlanRecipes");
                });

            modelBuilder.Entity("API.DAL.Models.ShoppingList", b =>
                {
                    b.Navigation("ShoppingListItems");
                });

            modelBuilder.Entity("API.DAL.Models.User", b =>
                {
                    b.Navigation("MealPlans");

                    b.Navigation("Notifications");

                    b.Navigation("Payments");

                    b.Navigation("Recipes");

                    b.Navigation("ShoppingLists");

                    b.Navigation("UserPreference");
                });
#pragma warning restore 612, 618
        }
    }
}
